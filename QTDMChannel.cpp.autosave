#include "QTDMChannel.h"
#include <memory>
QTDMChannel::QTDMChannel():m_channel(nullptr)
{
    
}

QTDMChannel::QTDMChannel(DDCChannelHandle handle)
    :m_channel(handle)
{
}
///
/// \brief 获取通道的数据类型
/// \return 
///
DDCDataType QTDMChannel::getDataType() const
{
    DDCDataType dataType;
	DDC_GetDataType(m_channel,&dataType);
    return dataType;
}

QString QTDMChannel::getName() const
{
    return getChannelStringPropertyByName(m_channel,DDC_CHANNEL_NAME);
}

QString QTDMChannel::getDescription() const
{
    return getChannelStringPropertyByName(m_channel,DDC_CHANNEL_DESCRIPTION);
}

QString QTDMChannel::getUnit() const
{
    return getChannelStringPropertyByName(m_channel,DDC_CHANNEL_UNIT_STRING);
}

QString QTDMChannel::getDataTypeString() const
{
    return dataTypeToString(getDataType ());
}

QString QTDMChannel::getChannelStringPropertyByName(const char* propertyName) const
{
    unsigned int length(0);
    //获取文件属性 - DDC_FILE_NAME
    int errCode = DDC_GetChannelStringPropertyLength (m_channel, propertyName, &length);
    char* property = nullptr;
    length = (8)*(length+1);
    property = new char[length];
    memset(property,0,sizeof(char)*length);
    errCode = DDC_GetChannelProperty (m_channel, propertyName, property, length);
    QString str = QString::fromLocal8Bit(property);
    if(property)
        delete[] property;
    return str;
}

QString QTDMChannel::dataTypeToString(const DDCDataType dataType)
{
	switch(dataType)
	{
	case DDCDataType::DDC_UInt8:
		return QStringLiteral("UInt8");
	case DDCDataType::DDC_Int16:
		return QStringLiteral("Int16");
	case DDCDataType::DDC_Int32:
		return QStringLiteral("Int32");
	case DDCDataType::DDC_Float:
		return QStringLiteral("Float");
	case DDCDataType::DDC_Double:
		return QStringLiteral("Double");
	case DDCDataType::DDC_String:
		return QStringLiteral("String");
	case DDCDataType::DDC_Timestamp:
		return QStringLiteral("Timestamp");
	}
	return QStringLiteral("UnKnow");
}